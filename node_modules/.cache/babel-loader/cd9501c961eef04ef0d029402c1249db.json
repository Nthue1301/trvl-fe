{"ast":null,"code":"import axios from 'axios';\nimport queryString from 'query-string';\nimport firebase from \"firebase\";\n\nconst getFirebasetoken = async () => {\n  const currenUser = firebase.auth().currentUser;\n\n  if (currenUser) {\n    return currenUser.getIdToken();\n  }\n\n  const hasRememberAccount = localStorage.getItem(\"token\");\n  if (!hasRememberAccount) return null;\n  return new Promise((resolve, reject) => {\n    const unregisterAuthObserver = firebase.auth().onAuthStateChanged(async user => {\n      if (!user) {\n        reject(null);\n      }\n\n      const token = await user.getIdToken();\n      console.log(\"axios token\" + token);\n      resolve(token);\n      unregisterAuthObserver();\n    });\n  });\n};\n\nconst axiosClient = axios.create({\n  baseURL: `http://localhost:666`,\n  headers: {\n    'content-type': \"application/json\"\n  },\n  paramsSerializer: params => queryString.stringify(params)\n});\naxiosClient.interceptors.request.use(async config => {\n  // const token = await getFirebasetoken();\n  const token = localStorage.getItem(\"token\");\n\n  if (token) {\n    config.headers.authorization = `Bearer ${token}`; //console.log(token);\n  }\n\n  return config;\n});\naxiosClient.interceptors.response.use(response => {\n  if (response && response.data) {\n    return response.data;\n  }\n\n  return response;\n}, error => {\n  // Handle errors\n  throw error;\n});\nexport default axiosClient;","map":{"version":3,"sources":["E:/Travel/trvl-fe/src/api/axiosClient.js"],"names":["axios","queryString","firebase","getFirebasetoken","currenUser","auth","currentUser","getIdToken","hasRememberAccount","localStorage","getItem","Promise","resolve","reject","unregisterAuthObserver","onAuthStateChanged","user","token","console","log","axiosClient","create","baseURL","headers","paramsSerializer","params","stringify","interceptors","request","use","config","authorization","response","data","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,MAAMC,gBAAgB,GAAG,YAAY;AACjC,QAAMC,UAAU,GAAGF,QAAQ,CAACG,IAAT,GAAgBC,WAAnC;;AACA,MAAIF,UAAJ,EAAgB;AACZ,WAAOA,UAAU,CAACG,UAAX,EAAP;AACH;;AACD,QAAMC,kBAAkB,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA3B;AACA,MAAI,CAACF,kBAAL,EAAyB,OAAO,IAAP;AAEzB,SAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAMC,sBAAsB,GAAGZ,QAAQ,CAACG,IAAT,GAAgBU,kBAAhB,CAAmC,MAAOC,IAAP,IAAgB;AAC9E,UAAI,CAACA,IAAL,EAAW;AACPH,QAAAA,MAAM,CAAC,IAAD,CAAN;AACH;;AACD,YAAMI,KAAK,GAAG,MAAMD,IAAI,CAACT,UAAL,EAApB;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBF,KAA5B;AACAL,MAAAA,OAAO,CAACK,KAAD,CAAP;AACAH,MAAAA,sBAAsB;AACzB,KAR8B,CAA/B;AAUH,GAXM,CAAP;AAYH,CApBD;;AAqBA,MAAMM,WAAW,GAAGpB,KAAK,CAACqB,MAAN,CAAa;AAC7BC,EAAAA,OAAO,EAAG,sBADmB;AAE7BC,EAAAA,OAAO,EAAE;AACL,oBAAgB;AADX,GAFoB;AAK7BC,EAAAA,gBAAgB,EAAEC,MAAM,IAAIxB,WAAW,CAACyB,SAAZ,CAAsBD,MAAtB;AALC,CAAb,CAApB;AAOAL,WAAW,CAACO,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CAAqC,MAAOC,MAAP,IAAkB;AACnD;AACA,QAAMb,KAAK,GAAGR,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,MAAIO,KAAJ,EAAW;AACPa,IAAAA,MAAM,CAACP,OAAP,CAAeQ,aAAf,GAAgC,UAASd,KAAM,EAA/C,CADO,CAEP;AACH;;AACD,SAAOa,MAAP;AACH,CARD;AASAV,WAAW,CAACO,YAAZ,CAAyBK,QAAzB,CAAkCH,GAAlC,CAAuCG,QAAD,IAAc;AAChD,MAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAzB,EAA+B;AAC3B,WAAOD,QAAQ,CAACC,IAAhB;AACH;;AACD,SAAOD,QAAP;AACH,CALD,EAKIE,KAAD,IAAW;AACV;AACA,QAAMA,KAAN;AACH,CARD;AASA,eAAed,WAAf","sourcesContent":["import axios from 'axios';\r\nimport queryString from 'query-string';\r\nimport firebase from \"firebase\"\r\n\r\nconst getFirebasetoken = async () => {\r\n    const currenUser = firebase.auth().currentUser;\r\n    if (currenUser) {\r\n        return currenUser.getIdToken();\r\n    }\r\n    const hasRememberAccount = localStorage.getItem(\"token\");\r\n    if (!hasRememberAccount) return null;\r\n\r\n    return new Promise((resolve, reject) => {\r\n        const unregisterAuthObserver = firebase.auth().onAuthStateChanged(async (user) => {\r\n            if (!user) {\r\n                reject(null)\r\n            }\r\n            const token = await user.getIdToken();\r\n            console.log(\"axios token\" + token);\r\n            resolve(token);\r\n            unregisterAuthObserver();\r\n        }\r\n        )\r\n    })\r\n}\r\nconst axiosClient = axios.create({\r\n    baseURL: `http://localhost:666`,\r\n    headers: {\r\n        'content-type': \"application/json\",\r\n    },\r\n    paramsSerializer: params => queryString.stringify(params),\r\n});\r\naxiosClient.interceptors.request.use(async (config) => {\r\n    // const token = await getFirebasetoken();\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n        config.headers.authorization = `Bearer ${token}`\r\n        //console.log(token);\r\n    }\r\n    return config;\r\n})\r\naxiosClient.interceptors.response.use((response) => {\r\n    if (response && response.data) {\r\n        return response.data;\r\n    }\r\n    return response;\r\n}, (error) => {\r\n    // Handle errors\r\n    throw error;\r\n});\r\nexport default axiosClient;"]},"metadata":{},"sourceType":"module"}